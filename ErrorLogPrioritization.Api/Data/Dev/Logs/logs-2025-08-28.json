[
  {
    "id": "8b0dfdfb-0124-4e5b-b574-87acfd308292",
    "timestamp": "2025-08-28T05:11:49.8208803Z",
    "source": "DateTimeParse.Parse",
    "message": "at System.DateTimeParse.Parse(String s, DateTimeFormatInfo dtfi, DateTimeStyles styles)     at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters(SanctionsResultsModel model, String tagPrefix) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 2508     at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.GetCheckStatusFromFunctionApp(List\u00601 CheckIds, Int32 applicantId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 609",
    "stackTrace": "String was not recognized as a valid DateTime.:   at System.DateTimeParse.Parse(String s, DateTimeFormatInfo dtfi, DateTimeStyles styles)     at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters(SanctionsResultsModel model, String tagPrefix) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 2508     at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.GetCheckStatusFromFunctionApp(List\u00601 CheckIds, Int32 applicantId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 609",
    "severity": "Medium",
    "priority": "Low",
    "aiReasoning": "Assigned Medium severity based on error pattern analysis",
    "potentialFix": "{\n  \u0022id\u0022: \u002283a23332-648a-4e83-b662-ccaf7ee56a76\u0022,\n  \u0022timestamp\u0022: \u00222025-08-26T06:59:00.737Z\u0022,\n  \u0022source\u0022: \u0022OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters\u0022,\n  \u0022mes...",
    "analyzedAt": "2025-08-28T05:12:27.9960632Z",
    "isAnalyzed": true,
    "resolutionStatus": "Pending",
    "resolvedAt": null,
    "resolvedBy": null,
    "adoBug": null
  },
  {
    "id": "f004a5a9-3884-4ac9-a997-7a95a1ca58ed",
    "timestamp": "2025-08-28T05:22:10.2745466Z",
    "source": "OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters",
    "message": "String was not recognized as a valid DateTime.",
    "stackTrace": "at System.DateTimeParse.Parse(String s, DateTimeFormatInfo dtfi, DateTimeStyles styles)\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters(SanctionsResultsModel model, String tagPrefix) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 2508\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.GetCheckStatusFromFunctionApp(List\u00601 CheckIds, Int32 applicantId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 609",
    "severity": "Medium",
    "priority": "Medium",
    "aiReasoning": "This error prevents the application from correctly parsing or processing date values, likely causing incorrect data display or failed business logic execution. It\u0027s not system-wide, but could disrupt key workflows or integrations, so severity and priority are Medium.",
    "potentialFix": "Root Cause: The input string being converted to DateTime is in an incorrect or unexpected format for DateTime.Parse. Solution: Ensure all date strings passed to MapToDocumentParameters are in a valid, ISO 8601 or expected culture-specific format. Update code to use DateTime.TryParse or DateTime.TryParseExact for safer parsing and better error handling. Example: DateTime.TryParseExact(dateString, \u0022yyyy-MM-dd\u0022, CultureInfo.InvariantCulture, DateTimeStyles.None, out var parsedDate). User Guidance: Confirm any manual date entries and integrations provide dates as YYYY-MM-DD. Reference: https://learn.microsoft.com/en-us/dotnet/standard/base-types/parsing-datetime",
    "analyzedAt": "2025-08-28T05:22:10.2745411Z",
    "isAnalyzed": true,
    "resolutionStatus": "Pending",
    "resolvedAt": null,
    "resolvedBy": null,
    "adoBug": null
  },
  {
    "id": "9ab5c857-2046-4d09-936c-046e6d7e88c3",
    "timestamp": "2025-08-28T05:23:54.9691779Z",
    "source": "OnBoardLarge.Pdfmergetag.PDFMergeTags.GetCheckTags",
    "message": "Value cannot be null. (Parameter \u0027collection\u0027)",
    "stackTrace": "at System.ThrowHelper.ThrowArgumentNullException(ExceptionArgument argument)\n at System.Collections.Generic.List\u00601.InsertRange(Int32 index, IEnumerable\u00601 collection)\n at OnBoardLarge.Pdfmergetag.PDFMergeTags.GetCheckTags(Int32 applicantId, List\u00601 checkIds, ServerSideDeclarationReplacerList replacerTags) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.Pdfreplacetag\\PDFMergeTags.cs:line 619\n at OnBoardLarge.Pdfmergetag.PDFMergeTags.GetUBCReportTags(Int32 applicantId, Int32 checkId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.Pdfreplacetag\\PDFMergeTags.cs:line 405\n at Onboarded.Functions.MergeTagReplacer.MergeTagReplacer.\u003CRun\u003Ed__2.MoveNext() in D:\\a\\1\\s\\Onboarded.Functions\\MergeTagReplacer\\MergeTagReplacer.cs:line 148",
    "severity": "High",
    "priority": "Medium",
    "aiReasoning": "The error was caused by a null collection being passed to List\u003CT\u003E.InsertRange, which likely results in failure of a key document processing operation for an applicant. The impact can block report generation or merging, making it a High severity issue. As it can be tied to specific data or paths and may not always crash the system, priority is set to Medium unless this pattern recurs frequently.",
    "potentialFix": "Root Cause: The collection parameter passed to List\u003CT\u003E.InsertRange is null, which is not permitted. This commonly happens if an upstream method returns or receives a null list instead of an empty collection.\nSolution: Audit the code paths leading to PDFMergeTags.GetCheckTags and ensure the checkIds and any other collection passed to InsertRange are checked for null and instantiated to an empty list if not provided. For example:\nif (collection == null) collection = new List\u003CT\u003E();\nAlternatively, use ?? new List\u003CT\u003E() when passing the parameter.\nUser Guidance: If this error follows a specific user or input workflow, users should make sure all required selections/inputs are made before submitting.\nReference: https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.insertrange",
    "analyzedAt": "2025-08-28T05:23:54.9691773Z",
    "isAnalyzed": true,
    "resolutionStatus": "Pending",
    "resolvedAt": null,
    "resolvedBy": null,
    "adoBug": null
  },
  {
    "id": "d5ee4b04-1b28-4685-92b0-c9801be5a5b2",
    "timestamp": "2025-08-28T05:25:31.2645595Z",
    "source": "Onboarded.Functions.Utility.MergeTagReplacerUtility.MergePdfsAndBlobUpload",
    "message": "One or more errors occurred.",
    "stackTrace": "at System.Threading.Tasks.Task\u00601.GetResultCore(Boolean waitCompletionNotification)\n at Onboarded.Functions.Utility.MergeTagReplacerUtility.MergePdfsAndBlobUpload(List\u00601 urls, Int32 applicantId, String mergedFileName, String connectionString, Int32 clientId, vClient vclient, String azureStorageAccount, String azureBlobContainerName) in D:\\Onboarded New\\Onboarded.Functions\\Utility\\MergeTagReplacerUtility.cs:line 1805\n at Onboarded.Functions.MergeTagReplacer.MergeTagReplacer.\u003CRun\u003Ed__2.MoveNext() in D:\\Onboarded New\\Onboarded.Functions\\MergeTagReplacer\\MergeTagReplacer.cs:line 409\nInner Exception: System.ArgumentException: String cannot be of zero length. Parameter name: oldValue at System.String.ReplaceInternal(String oldValue, String newValue) at System.String.Replace(String oldValue, String newValue) at OnBoardLarge.UploadDocumentToBlob.AzureBlobService.\u003CUploadCandidateProfileToBlob\u003Ed__9.MoveNext() in D:\\Onboarded New\\OnBoardLarge.Base\\OnBoardLarge.UploadDocumentToBlob\\AzureBlobService.cs:line 307",
    "severity": "High",
    "priority": "High",
    "aiReasoning": "The error is an unhandled System.AggregateException, containing a System.ArgumentException caused by a call to String.Replace with an invalid parameter (oldValue is an empty string). This likely prevents PDF merging and blob upload functionality, which is a major process. The error could block core application workflows for users and must be addressed immediately.",
    "potentialFix": "Root Cause: The exception was triggered by a call to String.Replace() where the first argument (oldValue) was an empty string. According to .NET documentation, oldValue cannot be empty, and passing an empty string will always result in System.ArgumentException. This occurred during document upload and PDF merging, potentially interrupting the overall file-handling pipeline. Solution: Review the code at OnBoardLarge.UploadDocumentToBlob.AzureBlobService.\u003CUploadCandidateProfileToBlob\u003Ed__9, especially line 307, and ensure that oldValue is checked for null or empty before calling Replace. Example fix: if (!string.IsNullOrEmpty(oldValue)) { str.Replace(oldValue, newValue); }. Also, investigate why oldValue is empty\u2014review upstream variables and refactor logic to prevent empty values here. User Guidance: No user action is needed; this requires a code fix by the development team. References: https://learn.microsoft.com/en-us/dotnet/api/system.string.replace and internal KB on aggregate exception handling.",
    "analyzedAt": "2025-08-28T05:25:31.2645587Z",
    "isAnalyzed": true,
    "resolutionStatus": "Pending",
    "resolvedAt": null,
    "resolvedBy": null,
    "adoBug": null
  },
  {
    "id": "7b259670-3572-491e-9e15-aca4b9b9779e",
    "timestamp": "2025-08-28T05:28:47.6119437Z",
    "source": "ApplicantReminderEmailDomain.sendReminderEmail",
    "message": "Task\u00601.GetResultCore(Boolean) exception occurred during sendReminderEmail",
    "stackTrace": "at System.Threading.Tasks.Task\u00601.GetResultCore(Boolean waitCompletionNotification)\n at OnBoardLarge.Domain.ApplicantModule.ApplicantReminderEmailDomain.sendReminderEmail(Int32 ClientId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.Domain\\ApplicantModule\\ApplicantReminderEmailDomain.cs:line 67",
    "severity": "Medium",
    "priority": "Medium",
    "aiReasoning": "This error occurs during an asynchronous operation in email sending, likely due to an unhandled exception when calling Task.Result or Task.Wait. This can block the processing of applicant reminder emails but does not crash the system or result in data loss. Severity is Medium as it may delay business communications, and priority is Medium since addressing it improves reliability.",
    "potentialFix": "Root Cause: The error is commonly due to an unhandled exception in an awaited asynchronous email-sending operation, typically caused by using .Result or .Wait on a Task that faults or by lacking proper exception handling around async code. Solution: 1) Refactor the sendReminderEmail method to use \u0027async/await\u0027 properly and wrap Task-related calls in try/catch blocks to handle exceptions explicitly. 2) If using Task.Result, replace with \u0027await\u0027 where possible to avoid AggregateException. 3) Log the inner exception for easier debugging. Example: \u0027try { await emailService.SendAsync(); } catch(Exception ex) { logger.LogError(ex, \u0022Failed to send reminder email\u0022); }\u0027. User Guidance: No user action needed unless you are a system administrator; ensure email configuration is correct. Reference: https://learn.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap",
    "analyzedAt": "2025-08-28T05:28:47.6119429Z",
    "isAnalyzed": true,
    "resolutionStatus": "Pending",
    "resolvedAt": null,
    "resolvedBy": null,
    "adoBug": null
  },
  {
    "id": "dd1a6b10-8c77-41aa-a2eb-1d047cbf9056",
    "timestamp": "2025-08-28T05:56:26.8700765Z",
    "source": "OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters",
    "message": "String was not recognized as a valid DateTime.",
    "stackTrace": "at System.DateTimeParse.Parse(String s, DateTimeFormatInfo dtfi, DateTimeStyles styles)\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters(SanctionsResultsModel model, String tagPrefix) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 2508\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.GetCheckStatusFromFunctionApp(List\u00601 CheckIds, Int32 applicantId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 609",
    "severity": "Medium",
    "priority": "Medium",
    "aiReasoning": "This error is caused by a string value failing to convert to a valid DateTime format. Parsing errors can disrupt workflow or integrations but do not crash the system or result in data loss, hence severity is Medium. The priority is also Medium as it needs to be addressed to ensure the integration works correctly but is not an immediate system-wide outage.",
    "potentialFix": "Root Cause: The input string provided to DateTime.Parse or a related method is not accurately formatted according to the expected DateTime pattern. This can occur if data contains unexpected or locale-specific date representations.\nHow to Fix: Review input data passed to the parsing method. Add input validation (e.g., DateTime.TryParse with a specified format) before attempting conversion. If the application processes multiple date formats, use DateTime.TryParseExact for stricter validation or log the offending input for investigation. Example:\nif (!DateTime.TryParse(inputString, out var result)) { /* handle error or log */ }\nUser Guidance: Confirm date/time inputs comply with the expected application format (such as yyyy-MM-dd or MM/dd/yyyy).\nReference: https://learn.microsoft.com/en-us/dotnet/api/system.datetime.tryparse and https://learn.microsoft.com/en-us/dotnet/standard/base-types/parsing-datetime",
    "analyzedAt": "2025-08-28T05:56:26.8700759Z",
    "isAnalyzed": true,
    "resolutionStatus": "Resolved",
    "resolvedAt": "2025-08-28T08:56:33.068Z",
    "resolvedBy": "Current User",
    "adoBug": null
  },
  {
    "id": "d4065c0c-ebe1-43c1-92d6-276e1eeb9b0c",
    "timestamp": "2025-08-28T05:59:31.4753482Z",
    "source": "OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters",
    "message": "String was not recognized as a valid DateTime.",
    "stackTrace": "at System.DateTimeParse.Parse(String s, DateTimeFormatInfo dtfi, DateTimeStyles styles)\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters(SanctionsResultsModel model, String tagPrefix) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 2508\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.GetCheckStatusFromFunctionApp(List\u00601 CheckIds, Int32 applicantId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 609",
    "severity": "Medium",
    "priority": "Medium",
    "aiReasoning": "The error occurred due to a failure in parsing a string to a DateTime object, which likely disrupts a feature that relies on correct date handling. This does not crash the entire system but could block essential data integration workflows, so severity is Medium and priority is Medium.",
    "potentialFix": "Root Cause: The error is triggered when the input string does not match any accepted DateTime formats. This is often caused by inconsistent or unexpected date string representations in incoming data.\nSolution: Add input validation and consistent formatting for all date strings before attempting to parse. Use DateTime.TryParse or DateTime.TryParseExact to safely convert strings, handle failures gracefully, and log problematic values.\nExample fix: \nDateTime dt;\nif (!DateTime.TryParse(inputString, out dt)) { /* handle invalid date, log error, set default, or prompt user */ }\nUser Guidance: Ensure that date fields are correctly filled and in supported formats where user input is possible.\nReference: https://learn.microsoft.com/en-us/dotnet/standard/base-types/parsing-datetime",
    "analyzedAt": "2025-08-28T05:59:31.4753476Z",
    "isAnalyzed": true,
    "resolutionStatus": "Pending",
    "resolvedAt": null,
    "resolvedBy": null,
    "adoBug": null
  },
  {
    "id": "be7a3fa2-7b77-42b1-9572-8c4d32595b1b",
    "timestamp": "2025-08-28T06:27:42.5397538Z",
    "source": "OnBoardLarge.Pdfmergetag.PDFMergeTags.GetCheckTags",
    "message": "Value cannot be null. (Parameter \u0027collection\u0027)",
    "stackTrace": "at System.ThrowHelper.ThrowArgumentNullException(ExceptionArgument argument)\nat System.Collections.Generic.List\u00601.InsertRange(Int32 index, IEnumerable\u00601 collection)\nat OnBoardLarge.Pdfmergetag.PDFMergeTags.GetCheckTags(Int32 applicantId, List\u00601 checkIds, ServerSideDeclarationReplacerList replacerTags) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.Pdfreplacetag\\PDFMergeTags.cs:line 619\nat OnBoardLarge.Pdfmergetag.PDFMergeTags.GetUBCReportTags(Int32 applicantId, Int32 checkId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.Pdfreplacetag\\PDFMergeTags.cs:line 405\nat Onboarded.Functions.MergeTagReplacer.MergeTagReplacer.\u003CRun\u003Ed__2.MoveNext() in D:\\a\\1\\s\\Onboarded.Functions\\MergeTagReplacer\\MergeTagReplacer.cs:line 148",
    "severity": "High",
    "priority": "High",
    "aiReasoning": "A null argument was passed to a method that expects a non-null collection. This resulted in an unhandled exception in core PDF tag processing logic, potentially affecting broader document generation operations and causing major feature failure. Immediate fix is required to restore functionality.",
    "potentialFix": "Root Cause: The error occurred because a null collection was passed to List\u003CT\u003E.InsertRange, which expects a non-null IEnumerable\u003CT\u003E object. This typically happens if an upstream method fails to initialize or supply the required collection. Solution: Audit the code path leading to PDFMergeTags.GetCheckTags and ensure that all collection parameters, especially the \u0027checkIds\u0027 or any collection passed to InsertRange, are initialized and non-null before use. Example fix in C#: if (collection == null) { throw new ArgumentNullException(nameof(collection)); } or collection = collection ?? new List\u003CT\u003E();. Add defensive null checks prior to calling InsertRange. User Guidance: No user action is required; developers should update the codebase to enforce non-null collection parameters. References: https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.insertrange",
    "analyzedAt": "2025-08-28T06:27:42.5397534Z",
    "isAnalyzed": true,
    "resolutionStatus": "Pending",
    "resolvedAt": null,
    "resolvedBy": null,
    "adoBug": null
  },
  {
    "id": "adf8ec25-564d-4e8d-b8be-cad7c1607dd8",
    "timestamp": "2025-08-28T08:48:21.5135122Z",
    "source": "OnBoardLarge.Pdfmergetag.PDFMergeTags.GetCheckTags",
    "message": "Value cannot be null. Parameter name: collection",
    "stackTrace": "at System.ThrowHelper.ThrowArgumentNullException(ExceptionArgument argument)\nat System.Collections.Generic.List\u00601.InsertRange(Int32 index, IEnumerable\u00601 collection)\nat OnBoardLarge.Pdfmergetag.PDFMergeTags.GetCheckTags(Int32 applicantId, List\u00601 checkIds, ServerSideDeclarationReplacerList replacerTags) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.Pdfreplacetag\\PDFMergeTags.cs:line 619\nat OnBoardLarge.Pdfmergetag.PDFMergeTags.GetUBCReportTags(Int32 applicantId, Int32 checkId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.Pdfreplacetag\\PDFMergeTags.cs:line 405\nat Onboarded.Functions.MergeTagReplacer.MergeTagReplacer.\u003CRun\u003Ed__2.MoveNext() in D:\\a\\1\\s\\Onboarded.Functions\\MergeTagReplacer\\MergeTagReplacer.cs:line 148",
    "severity": "High",
    "priority": "High",
    "aiReasoning": "A null parameter was passed into a method where a collection is required, which caused an unhandled exception that could interrupt a major processing workflow (tag merging). This can break feature functionality and affect business-critical output, so severity and priority are both High.",
    "potentialFix": "Root Cause: The error is caused by a null collection being passed to List\u003CT\u003E.InsertRange, which is not allowed and will throw an ArgumentNullException. Solution: Before calling InsertRange or similar list operations, validate that the collection parameter is not null. For example:\nif (collection != null) { list.InsertRange(index, collection); } else { /* handle or log appropriately */ }\nAlternatively, add null checks at the start of the method:\nif (collection == null) throw new ArgumentNullException(nameof(collection));\nUser Guidance: Ensure that any upstream logic constructing or passing the collection guarantees it is never null, or provide a default like an empty list.\nReference: https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.insertrange",
    "analyzedAt": "2025-08-28T08:48:21.5135111Z",
    "isAnalyzed": true,
    "resolutionStatus": "Resolved",
    "resolvedAt": "2025-08-28T08:50:24.304Z",
    "resolvedBy": "Current User",
    "adoBug": null
  },
  {
    "id": "0c2ad473-7b21-4390-88eb-355e069b273c",
    "timestamp": "2025-08-28T08:56:04.4011432Z",
    "source": "OnBoardLarge.Pdfmergetag.PDFMergeTags.GetCheckTags",
    "message": "Value cannot be null. Parameter name: collection",
    "stackTrace": "at System.ThrowHelper.ThrowArgumentNullException(ExceptionArgument argument)\n at System.Collections.Generic.List\u00601.InsertRange(Int32 index, IEnumerable\u00601 collection)\n at OnBoardLarge.Pdfmergetag.PDFMergeTags.GetCheckTags(Int32 applicantId, List\u00601 checkIds, ServerSideDeclarationReplacerList replacerTags) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.Pdfreplacetag\\PDFMergeTags.cs:line 619\n at OnBoardLarge.Pdfmergetag.PDFMergeTags.GetUBCReportTags(Int32 applicantId, Int32 checkId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.Pdfreplacetag\\PDFMergeTags.cs:line 405\n at Onboarded.Functions.MergeTagReplacer.MergeTagReplacer.\u003CRun\u003Ed__2.MoveNext() in D:\\a\\1\\s\\Onboarded.Functions\\MergeTagReplacer\\MergeTagReplacer.cs:line 148",
    "severity": "High",
    "priority": "High",
    "aiReasoning": "This error is due to a null collection being passed to InsertRange. As this occurs in a core backend data process, it likely interrupts an essential feature affecting downstream processing. The stack trace indicates the error could block functionality for multiple users, justifying both High severity and High priority.",
    "potentialFix": "Root Cause: A null reference was passed to List\u003CT\u003E.InsertRange, which requires a non-null IEnumerable\u003CT\u003E collection. This often happens when a method expects a list to be initialized or when data-fetching logic returns null instead of an empty collection. Solution: Identify all calls to GetCheckTags and ensure that the \u0027checkIds\u0027 parameter and any target collections are initialized to empty lists if they may be null. Example in C#: checkIds = checkIds ?? new List\u003Cint\u003E(); User Guidance: No user action required, this is a technical backend issue. Reference: https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.insertrange",
    "analyzedAt": "2025-08-28T08:56:04.4011429Z",
    "isAnalyzed": true,
    "resolutionStatus": "Pending",
    "resolvedAt": null,
    "resolvedBy": null,
    "adoBug": null
  },
  {
    "id": "d88bfa3b-b597-448f-9131-4ddbcfdb8f2b",
    "timestamp": "2025-08-28T09:21:52.8895022Z",
    "source": "OnBoardLarge.Pdfmergetag.PDFMergeTags.GetCheckTags",
    "message": "System.ThrowHelper.ThrowArgumentNullException: Value cannot be null. Parameter name: collection",
    "stackTrace": "at System.ThrowHelper.ThrowArgumentNullException(ExceptionArgument argument)\n    at System.Collections.Generic.List\u00601.InsertRange(Int32 index, IEnumerable\u00601 collection)\n    at OnBoardLarge.Pdfmergetag.PDFMergeTags.GetCheckTags(Int32 applicantId, List\u00601 checkIds, ServerSideDeclarationReplacerList replacerTags) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.Pdfreplacetag\\PDFMergeTags.cs:line 619\n    at OnBoardLarge.Pdfmergetag.PDFMergeTags.GetUBCReportTags(Int32 applicantId, Int32 checkId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.Pdfreplacetag\\PDFMergeTags.cs:line 405\n    at Onboarded.Functions.MergeTagReplacer.MergeTagReplacer.\u003CRun\u003Ed__2.MoveNext() in D:\\a\\1\\s\\Onboarded.Functions\\MergeTagReplacer\\MergeTagReplacer.cs:line 148",
    "severity": "High",
    "priority": "High",
    "aiReasoning": "This is a high severity and high priority issue because a null collection is being passed to the InsertRange method in a core data processing workflow. This will cause a runtime exception and disrupt document/tag merging functionality, potentially impacting critical application features for many users.",
    "potentialFix": "Root Cause: The List\u003CT\u003E.InsertRange method received a null collection argument, triggering an ArgumentNullException. This typically happens if the source collection or an upstream function provided a null object instead of an initialized list or enumerable.\nHow to Fix: Review the code at PDFMergeTags.cs, line 619, and trace where the collection comes from. Ensure that any variable passed to InsertRange is never null. You can use a null check and initialize to an empty list if needed. Example fix:\nif (collection == null) collection = new List\u003CT\u003E();\n// or throw a controlled exception before InsertRange.\nAdditionally, validate inputs at the call site (e.g., GetCheckTags) and ensure upstream methods (like GetUBCReportTags or their parameters) never pass null values for collections that will be inserted.\nUser Guidance: As this is a backend/processing issue, end users may encounter document/tag merging failures. Inform them the system error is being resolved.\nReference: https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.insertrange",
    "analyzedAt": "2025-08-28T09:21:52.8895017Z",
    "isAnalyzed": true,
    "resolutionStatus": "Resolved",
    "resolvedAt": "2025-08-28T09:23:06.282Z",
    "resolvedBy": "Current User",
    "adoBug": null
  },
  {
    "id": "8deb7b8d-714d-4e6e-acb4-6639c246b75a",
    "timestamp": "2025-08-28T10:58:59.1057124Z",
    "source": "OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters",
    "message": "String was not recognized as a valid DateTime.",
    "stackTrace": "at System.DateTimeParse.Parse(String s, DateTimeFormatInfo dtfi, DateTimeStyles styles)\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters(SanctionsResultsModel model, String tagPrefix) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 2508\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.GetCheckStatusFromFunctionApp(List\u00601 CheckIds, Int32 applicantId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 609",
    "severity": "High",
    "priority": "High",
    "aiReasoning": "The error results from an invalid DateTime string input, which leads to a failure in parsing. Since this causes a failure in background application logic and may disrupt processing of applicant checks, it is classified as High severity and High priority, as it could block critical business functionality.",
    "potentialFix": "Root Cause: The input string provided to DateTime.Parse does not match a valid DateTime format, likely due to inconsistent or improperly formatted date string in the SanctionsResultsModel or related data being mapped.\nHow to Fix: Validate and sanitize all date inputs prior to parsing. Use DateTime.TryParse or DateTime.TryParseExact to handle invalid formats gracefully, and log or handle improper inputs explicitly without throwing unhandled exceptions.\nExample Fix:\nDateTime parsedDate;\nif (!DateTime.TryParse(inputString, out parsedDate)) { /* handle invalid format, e.g., set default, log error */ }\n\nUser Guidance: Ensure that date fields passed from upstream sources are in a recognized format (e.g., \u0027yyyy-MM-ddTHH:mm:ssZ\u0027).\nReference: https://learn.microsoft.com/en-us/dotnet/api/system.datetime.tryparse\n",
    "analyzedAt": "2025-08-28T10:58:58.4390789Z",
    "isAnalyzed": true,
    "resolutionStatus": "Pending",
    "resolvedAt": null,
    "resolvedBy": null,
    "adoBug": {
      "title": "Null value encountered for non-nullable property in keyword data",
      "description": "Source: KeywordRepository.SaveOrUpdate\n\nMessage: Null value encountered for non-nullable property in keyword data\n\nAI Reasoning: This error likely occurs when required fields such as Grade, ReferenceNo, or YearUsed are missing during the save or update operation. Severity=Low, Priority=Low.\n\nPotential Fix: Root cause is missing required field values. Implement input validation on the client and server to ensure all non-nullable properties are set before saving. See ASP.NET Core validation docs: https://learn.microsoft.com/en-us/aspnet/core/mvc/models/validation",
      "reproSteps": "Attempt to save or update a keyword record with missing required fields (e.g., Grade, ReferenceNo, or YearUsed left null) \u2192 Observe validation failure or error log entry.",
      "severity": "Low",
      "priority": "Low",
      "areaPath": "KeywordRepository.SaveOrUpdate",
      "assignedTo": "",
      "tags": [
        "AI-AutoGenerated",
        "FixMate",
        "ErrorLog"
      ]
    }
  },
  {
    "id": "151f9dfa-9c46-4946-b581-410dd82912c4",
    "timestamp": "2025-08-28T11:29:41.706032Z",
    "source": "OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters",
    "message": "String was not recognized as a valid DateTime.",
    "stackTrace": "at System.DateTimeParse.Parse(String s, DateTimeFormatInfo dtfi, DateTimeStyles styles)\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters(SanctionsResultsModel model, String tagPrefix) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 2508\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.GetCheckStatusFromFunctionApp(List\u00601 CheckIds, Int32 applicantId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 609",
    "severity": "High",
    "priority": "High",
    "aiReasoning": "This error results from a failed attempt to parse a string into a DateTime object. As this can block the progression of background checks for applicants, it disrupts a key business workflow. Therefore, both severity and priority are classified as High.",
    "potentialFix": "Root Cause: The code attempted to parse a string as DateTime, but the format did not match any recognized DateTime patterns. \nHow to Fix: 1. Identify all input strings passed to DateTime.Parse (or related parsing methods) in MapToDocumentParameters. 2. Add validation and logging for input formats before parsing. 3. Use DateTime.TryParse or TryParseExact for safer handling. 4. If data is from external sources, enforce and document required formats (e.g., \u0022yyyy-MM-dd\u0022). \nCode Sample:\nbool success = DateTime.TryParse(inputDate, out var parsedDate);\nif (!success) { /* handle gracefully, log error */ }\n5. Update unit tests to cover edge cases. \nReference: https://learn.microsoft.com/en-us/dotnet/api/system.datetime.tryparse",
    "analyzedAt": "2025-08-28T11:29:41.7060312Z",
    "isAnalyzed": true,
    "resolutionStatus": "Pending",
    "resolvedAt": null,
    "resolvedBy": null,
    "adoBug": {
      "title": "String was not recognized as a valid DateTime.",
      "description": "Source: OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters\n\nMessage: String was not recognized as a valid DateTime.\n\nStackTrace:\nat System.DateTimeParse.Parse(String s, DateTimeFormatInfo dtfi, DateTimeStyles styles)\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters(SanctionsResultsModel model, String tagPrefix) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 2508\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.GetCheckStatusFromFunctionApp(List\u00601 CheckIds, Int32 applicantId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 609\n\nAI Reasoning: This error results from a failed attempt to parse a string into a DateTime object. As this can block the progression of background checks for applicants, it disrupts a key business workflow. Severity=High, Priority=High.\n\nPotential Fix: Root Cause: The code attempted to parse a string as DateTime, but the format did not match any recognized DateTime patterns. Solution: Add validation and logging before parsing, use DateTime.TryParse/TryParseExact, and ensure incoming strings are in a standard, documented format. Reference: https://learn.microsoft.com/en-us/dotnet/api/system.datetime.tryparse",
      "reproSteps": "Trigger background check processing with data containing dates in unexpected formats \u2192 Observe failure in MapToDocumentParameters",
      "severity": "High",
      "priority": "High",
      "areaPath": "OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters",
      "assignedTo": "",
      "tags": [
        "AI-AutoGenerated",
        "FixMate",
        "ErrorLog"
      ]
    }
  },
  {
    "id": "39d5729d-0b43-4e1c-b82a-55b2cd68ebbc",
    "timestamp": "2025-08-28T11:45:45.3080342Z",
    "source": "OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters",
    "message": "String was not recognized as a valid DateTime.",
    "stackTrace": "at System.DateTimeParse.Parse(String s, DateTimeFormatInfo dtfi, DateTimeStyles styles)\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters(SanctionsResultsModel model, String tagPrefix) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 2508\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.GetCheckStatusFromFunctionApp(List\u00601 CheckIds, Int32 applicantId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 609",
    "severity": "Medium",
    "priority": "High",
    "aiReasoning": "The error was triggered due to a string value not being correctly parsed into a DateTime object. This could potentially impact background checks or applicant onboarding workflows if left unresolved, but does not crash the entire system. Severity is set to Medium because it disrupts a significant module but is not system-wide catastrophic. Priority is High because it may block automated processes for multiple applicants and needs prompt resolution.",
    "potentialFix": "Root Cause: The input string provided to DateTime.Parse does not match an expected format, leading to a parsing exception. Solution: 1) Identify where the source string for the DateTime field is coming from in the SanctionsResultsModel. 2) Add validation or TryParse logic before parsing to handle or log non-standard DateTime formats. 3) Ensure all date strings being processed conform to a recognized format such as ISO 8601 (yyyy-MM-ddTHH:mm:ss), or use DateTime.TryParseExact with the expected format(s). Example: \u0027if(!DateTime.TryParse(someString, out var dt)) { /*handle gracefully*/ }\u0027. Reference: https://learn.microsoft.com/en-us/dotnet/api/system.datetime.tryparse and https://learn.microsoft.com/en-us/dotnet/standard/base-types/parsing-datetime. User Guidance: Ensure that any dates entered or processed by this workflow follow the expected format.",
    "analyzedAt": "2025-08-28T11:45:45.3080337Z",
    "isAnalyzed": true,
    "resolutionStatus": "Pending",
    "resolvedAt": null,
    "resolvedBy": null,
    "adoBug": {
      "title": "String was not recognized as a valid DateTime.",
      "description": "Source: OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters\n\nMessage: String was not recognized as a valid DateTime.\n\nStackTrace:\nat System.DateTimeParse.Parse(String s, DateTimeFormatInfo dtfi, DateTimeStyles styles)\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters(SanctionsResultsModel model, String tagPrefix) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 2508\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.GetCheckStatusFromFunctionApp(List\u00601 CheckIds, Int32 applicantId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 609\n\nAI Reasoning: The error was triggered by a DateTime parsing failure and could block onboarding-related integrations. Severity=Medium, Priority=High.\n\nPotential Fix: Root Cause: The input string for DateTime parsing does not match an expected format. Solution: Use DateTime.TryParse or TryParseExact; validate format before parsing. Reference: https://learn.microsoft.com/en-us/dotnet/api/system.datetime.tryparse and https://learn.microsoft.com/en-us/dotnet/standard/base-types/parsing-datetime.",
      "reproSteps": "Attempt to process an applicant or background check where a date string is malformed or in an unexpected format \u2192 Observe exception in logs at MapToDocumentParameters.",
      "severity": "Medium",
      "priority": "High",
      "areaPath": "OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters",
      "assignedTo": "",
      "tags": [
        "AI-AutoGenerated",
        "FixMate",
        "ErrorLog"
      ]
    }
  },
  {
    "id": "8cc42e4c-9498-4654-a8a2-97b0b22b3208",
    "timestamp": "2025-08-28T11:46:08.9369982Z",
    "source": "Onboarded.Functions.Utility.MergeTagReplacerUtility..ctor",
    "message": "Exception occurred while initializing OpenXmlPowerToolsDocument from byte array.",
    "stackTrace": "at OpenXmlPowerTools.OpenXmlPowerToolsDocument..ctor(Byte[] byteArray)\nat OpenXmlPowerTools.WmlDocument..ctor(String fileName, Byte[] byteArray)\nat Onboarded.Functions.Utility.MergeTagReplacerUtility..ctor(String fileUrl, Int32 clientId, AgreementModel agreement) in D:\\Onboarded Project\\Onboarded\\Onboarded.Functions\\Utility\\MergeTagReplacerUtility.cs:line 69\nat Onboarded.Functions.MergeTagReplacer.MergeTagReplacer.\u003CRun\u003Ed__2.MoveNext() in D:\\Onboarded Project\\Onboarded\\Onboarded.Functions\\MergeTagReplacer\\MergeTagReplacer.cs:line 88",
    "severity": "High",
    "priority": "High",
    "aiReasoning": "The error is thrown in the constructor of MergeTagReplacerUtility due to a failure in initializing an OpenXmlPowerToolsDocument from a byte array, typically rooted in invalid or corrupt document bytes. This blocks the document processing pipeline for at least one user workflow; so severity is High. Since this error can block onboarding or other document processing, it should be prioritized immediately (priority High).",
    "potentialFix": "Root Cause: The byte array provided to OpenXmlPowerToolsDocument is likely corrupted, invalid, or does not represent a compatible WordprocessingML document.\nSteps to Fix: 1. Validate that the file at \u0027fileUrl\u0027 is accessible and is a valid .docx file; ensure it is not zero-byte or partially uploaded. 2. Add a check to verify file type and byte array size before passing to OpenXmlPowerToolsDocument. 3. Surround the constructor call with try/catch, log the detailed error, and return a descriptive error to the user. 4. If file content comes from external storage or user upload, ensure stream is fully read and closed. 5. Review how you obtain/process agreement documents (possibly add file integrity checks).\nUser Guidance: Verify input document format (.docx), re-upload if needed. If the issue persists, contact support with the document.\nReference: https://github.com/OfficeDev/Open-Xml-PowerTools/blob/master/Documentation/WordprocessingMLDocumentation.md#WmlDocument-constructor",
    "analyzedAt": "2025-08-28T11:46:08.9369978Z",
    "isAnalyzed": true,
    "resolutionStatus": "Pending",
    "resolvedAt": null,
    "resolvedBy": null,
    "adoBug": {
      "title": "Exception occurred while initializing OpenXmlPowerToolsDocument from byte array.",
      "description": "An error was encountered in \u0027Onboarded.Functions.Utility.MergeTagReplacerUtility..ctor\u0027, preventing successful processing of a Word document.\n\nSource: Onboarded.Functions.Utility.MergeTagReplacerUtility..ctor\nMessage: Exception occurred while initializing OpenXmlPowerToolsDocument from byte array.\nStack Trace: at OpenXmlPowerTools.OpenXmlPowerToolsDocument..ctor(Byte[] byteArray)\nat OpenXmlPowerTools.WmlDocument..ctor(String fileName, Byte[] byteArray)\nat Onboarded.Functions.Utility.MergeTagReplacerUtility..ctor(String fileUrl, Int32 clientId, AgreementModel agreement) in D:\\Onboarded Project\\Onboarded\\Onboarded.Functions\\Utility\\MergeTagReplacerUtility.cs:line 69\nat Onboarded.Functions.MergeTagReplacer.MergeTagReplacer.\u003CRun\u003Ed__2.MoveNext() in D:\\Onboarded Project\\Onboarded\\Onboarded.Functions\\MergeTagReplacer\\MergeTagReplacer.cs:line 88\n\nReasoning: Error indicates corrupt or incompatible document bytes. This blocks the MergeTagReplacer utility, impacting onboarding or document workflows.\nPotential Fix: 1. Validate file at fileUrl is a proper .docx and fully readable. 2. Add validation for byte arrays before instantiating OpenXmlPowerToolsDocument. 3. Use try/catch for this block, log inner details, inform user if input doc is invalid. 4. Check document acquisition and upload steps.\nReference: https://github.com/OfficeDev/Open-Xml-PowerTools/blob/master/Documentation/WordprocessingMLDocumentation.md#WmlDocument-constructor",
      "reproSteps": "Trigger MergeTagReplacer function using a Word document (possibly with a corrupt or unsupported file) for one client agreement \u2192 Observe exception in logs as MergeTagReplacerUtility attempts to read/construct the document.",
      "severity": "High",
      "priority": "High",
      "areaPath": "Onboarded.Functions.Utility.MergeTagReplacerUtility",
      "assignedTo": "",
      "tags": [
        "AI-AutoGenerated",
        "FixMate",
        "ErrorLog"
      ]
    }
  },
  {
    "id": "b359bb2a-cab4-4aaf-a59b-083913e05549",
    "timestamp": "2025-08-28T11:49:16.6549899Z",
    "source": "OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters",
    "message": "String was not recognized as a valid DateTime.",
    "stackTrace": "at System.DateTimeParse.Parse(String s, DateTimeFormatInfo dtfi, DateTimeStyles styles)\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters(SanctionsResultsModel model, String tagPrefix) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 2508\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.GetCheckStatusFromFunctionApp(List\u00601 CheckIds, Int32 applicantId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 609",
    "severity": "High",
    "priority": "High",
    "aiReasoning": "The error was caused by an attempt to parse a string that is not in a valid DateTime format. This impacts the integration\u0027s execution and may prevent processing for affected applicants, potentially blocking critical onboarding or compliance activities. Therefore, severity and priority are both High.",
    "potentialFix": "Root Cause: The application attempted to parse a string as a DateTime, but the string did not match a recognized DateTime format. This is likely due to an unexpected or inconsistent input format (possibly missing or malformed dates from an upstream system or data feed).\nSolution: Add validation and error handling before parsing date strings. Use DateTime.TryParseExact with expected formats and fallback logic. Example:\nDateTime dt;\nif (!DateTime.TryParseExact(dateString, \u0022yyyy-MM-dd\u0022, CultureInfo.InvariantCulture, DateTimeStyles.None, out dt)) {\n    // Log a warning and skip or use a default value\n}\nCheck that all integrations and upstream data provide dates in a consistent and expected format.\nUser Guidance: If possible, confirm with data providers or users the expected date format requirements. Refer to team coding standards on date handling and validation.\nReference: https://learn.microsoft.com/en-us/dotnet/api/system.datetime.tryparseexact",
    "analyzedAt": "2025-08-28T11:49:16.6549894Z",
    "isAnalyzed": true,
    "resolutionStatus": "Pending",
    "resolvedAt": null,
    "resolvedBy": null,
    "adoBug": {
      "title": "String was not recognized as a valid DateTime.",
      "description": "An error occurred in the OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters method where a string was not recognized as a valid DateTime. The stack trace shows the error occurs during parsing and may impact overall onboarding or compliance workflows that depend on this integration. Root cause likely involves unexpected date formats from input data. See AI fix suggestions for remediation.",
      "reproSteps": "Trigger the GetCheckStatusFromFunctionApp method with a SanctionsResultsModel where a date field contains an invalid or unexpected format string. Error observed at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters().",
      "severity": "High",
      "priority": "High",
      "areaPath": "OnBoardLarge.CentralUtility.UniversalBackgroundIntegration",
      "assignedTo": "",
      "tags": [
        "AI-AutoGenerated",
        "FixMate",
        "ErrorLog"
      ]
    }
  },
  {
    "id": "d990fe06-79ea-4ed5-bf7d-546ae7b92cd6",
    "timestamp": "2025-08-28T12:19:33.0054837Z",
    "source": "OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters",
    "message": "String was not recognized as a valid DateTime.",
    "stackTrace": "at System.DateTimeParse.Parse(String s, DateTimeFormatInfo dtfi, DateTimeStyles styles)\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters(SanctionsResultsModel model, String tagPrefix) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 2508\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.GetCheckStatusFromFunctionApp(List\u00601 CheckIds, Int32 applicantId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 609",
    "severity": "High",
    "priority": "High",
    "aiReasoning": "The error occurs due to a failure in parsing a date string, likely from unvalidated or malformed input. This can cause failures in business logic that relies on date values and can disrupt processing for multiple users or integrations. Since it occurs within a core mapping function and appears in an integration path, severity and priority are High.",
    "potentialFix": "Root Cause: The error occurs when attempting to parse a date string that does not match the expected format, possibly due to bad input data or a mismatch in expected date formats (e.g., \u0027MM/dd/yyyy\u0027 vs \u0027yyyy-MM-dd\u0027).\nSolution Steps: 1) Implement robust input validation to check that the string conforms to the expected DateTime format before attempting to parse. 2) Use DateTime.TryParse or DateTime.TryParseExact for safer parsing and to handle parse failures gracefully. 3) Log the offending string for debugging and potential data correction.\nExample fix:\nstring inputDate = ...;\nDateTime dt;\nif (!DateTime.TryParseExact(inputDate, \u0022yyyy-MM-dd\u0022, CultureInfo.InvariantCulture, DateTimeStyles.None, out dt)) {\n   // Handle error, log inputDate\n}\nUser Guidance: Ensure input files or API providers supply dates in the documented format. Review integration documentation and update mapping logic if business requirements change.\nReference: https://learn.microsoft.com/en-us/dotnet/api/system.datetime.tryparseexact",
    "analyzedAt": "2025-08-28T12:19:33.0054829Z",
    "isAnalyzed": true,
    "resolutionStatus": "Pending",
    "resolvedAt": null,
    "resolvedBy": null,
    "adoBug": {
      "title": "String was not recognized as a valid DateTime.",
      "description": "An exception is thrown in the OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters method when parsing a string to DateTime. The specific message is: \u0027String was not recognized as a valid DateTime.\u0027 The error occurs in UniversalBackgroundIntegration.cs at line 2508. Stack trace:\nat System.DateTimeParse.Parse(String s, DateTimeFormatInfo dtfi, DateTimeStyles styles)\nat OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters(SanctionsResultsModel model, String tagPrefix)\nat OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.GetCheckStatusFromFunctionApp(List\u00601 CheckIds, Int32 applicantId)\nAI Reasoning: The error is likely due to malformed or improper date string input that does not conform to expected formats. This can prevent critical mapping and integration logic from executing correctly, affecting business processing.\nPotential Fix: Add input validation for date strings before parsing. Use DateTime.TryParse or DateTime.TryParseExact to handle parsing more safely. Log the invalid inputs and review integration documentation for the required format. See: https://learn.microsoft.com/en-us/dotnet/api/system.datetime.tryparseexact",
      "reproSteps": "Attempt to process data or integration input where a date string does not match the expected format (e.g., provide an invalid or improperly formatted date to MapToDocumentParameters) \u2192 Observe exception.",
      "severity": "High",
      "priority": "High",
      "areaPath": "OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters",
      "assignedTo": "",
      "tags": [
        "AI-AutoGenerated",
        "FixMate",
        "ErrorLog"
      ]
    }
  },
  {
    "id": "45b7dcee-6e1a-4e70-aa4d-86a4c2df1ff9",
    "timestamp": "2025-08-28T12:26:55.9487266Z",
    "source": "OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters",
    "message": "String was not recognized as a valid DateTime.",
    "stackTrace": "at System.DateTimeParse.Parse(String s, DateTimeFormatInfo dtfi, DateTimeStyles styles)\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters(SanctionsResultsModel model, String tagPrefix) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 2508\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.GetCheckStatusFromFunctionApp(List\u00601 CheckIds, Int32 applicantId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 609",
    "severity": "High",
    "priority": "High",
    "aiReasoning": "This is a data parsing error where a string value could not be interpreted as a valid DateTime. This can lead to failures in document generation or downstream processing, affecting core business workflows (such as applicant background checks). If common, could block or corrupt onboarding data, elevating the severity and priority.",
    "potentialFix": "Root Cause: An input string provided to DateTime.Parse or related method in \u0027MapToDocumentParameters\u0027 could not be recognized as a valid date/time format, possibly due to data issues or inconsistent formatting standards from upstream systems.\nSolution: 1) Identify the input string that failed parsing (log the problematic string for debugging). 2) Use DateTime.TryParse or DateTime.TryParseExact to handle invalid formats gracefully and avoid exceptions. 3) Enforce input data cleansing and validation before parsing. 4) If integration partners provide the date, update contract/documentation to specify required format (e.g., \u0027yyyy-MM-ddTHH:mm:ss\u0027).\nExample C# fix: \nDateTime parsedDate;\nif (!DateTime.TryParse(inputString, out parsedDate))\n{\n   // Handle error: log/skip/default value/notify\n}\nUser Guidance: Check source data for invalid or missing date fields and correct them before retrying.\nReferences: https://learn.microsoft.com/en-us/dotnet/api/system.datetime.tryparse",
    "analyzedAt": "2025-08-28T12:26:55.9487262Z",
    "isAnalyzed": true,
    "resolutionStatus": "Resolved",
    "resolvedAt": "2025-08-28T12:28:10.148Z",
    "resolvedBy": "Current User",
    "adoBug": {
      "title": "String was not recognized as a valid DateTime.",
      "description": "A string value provided during processing in \u0027OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters\u0027 failed to parse as a valid DateTime. This caused a runtime exception at line 2508 of UniversalBackgroundIntegration.cs. Stack trace indicates the issue originated during document parameter mapping, potentially affecting applicant background check integrations. The error indicates possible data contract or formatting discrepancies between integrated systems.\n\nStack Trace:\nat System.DateTimeParse.Parse(String s, DateTimeFormatInfo dtfi, DateTimeStyles styles)\nat OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters(...)\nat OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.GetCheckStatusFromFunctionApp(...)\n\nReasoning: This parsing error can block or corrupt document process flows, likely impacting business outcomes if not addressed promptly.",
      "reproSteps": "Attempt to process or map document parameters with SanctionsResultsModel containing invalid or incorrectly formatted date values. Observe failure at DateTime.Parse and resulting exception.",
      "severity": "High",
      "priority": "High",
      "areaPath": "OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters",
      "assignedTo": "",
      "tags": [
        "AI-AutoGenerated",
        "FixMate",
        "ErrorLog"
      ]
    }
  },
  {
    "id": "20838356-6b85-4291-8d0c-18762eac7f82",
    "timestamp": "2025-08-28T12:40:30.6798775Z",
    "source": "OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters",
    "message": "String was not recognized as a valid DateTime.",
    "stackTrace": "at System.DateTimeParse.Parse(String s, DateTimeFormatInfo dtfi, DateTimeStyles styles)\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters(SanctionsResultsModel model, String tagPrefix) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 2508\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.GetCheckStatusFromFunctionApp(List\u00601 CheckIds, Int32 applicantId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 609",
    "severity": "High",
    "priority": "High",
    "aiReasoning": "The error occurs due to a failed attempt to parse a string as a valid DateTime, which can break critical workflow related to background integration for applicant checks. Since this may block or corrupt data processing for onboarding, severity and priority are set to High.",
    "potentialFix": "Root Cause: A string value that does not match the expected DateTime format was passed to DateTime.Parse in MapToDocumentParameters. This often occurs due to null, empty, or improperly formatted date strings (e.g., \u0027MM/dd/yyyy\u0027 vs \u0027dd/MM/yyyy\u0027, inclusion of time zone data, or locale issues).\nSolution: Review the input date string for format mismatches or null values before calling DateTime.Parse. Use DateTime.TryParse or DateTime.TryParseExact to handle incorrect or unexpected formats gracefully. Add validation logic before mapping to log or skip over bad data, and provide clear error handling or user feedback.\nExample:\nif(!DateTime.TryParse(dateString, out DateTime result)) { /* log error, skip entry or assign default date */ }\nReference: https://learn.microsoft.com/en-us/dotnet/standard/base-types/parsing-datetime\nUser Guidance: Ensure all external or user-provided date inputs are in the expected format.",
    "analyzedAt": "2025-08-28T12:40:30.6798745Z",
    "isAnalyzed": true,
    "resolutionStatus": "Resolved",
    "resolvedAt": "2025-08-28T12:41:35.567Z",
    "resolvedBy": "Current User",
    "adoBug": {
      "title": "String was not recognized as a valid DateTime.",
      "description": "An invalid string value was passed for DateTime parsing within MapToDocumentParameters, causing the operation to fail. This occurred in OnBoardLarge.CentralUtility.UniversalBackgroundIntegration at line 2508 while processing sanctions results, impacting document mapping and background check integrations.\n\nStack Trace:\nat System.DateTimeParse.Parse(String s, DateTimeFormatInfo dtfi, DateTimeStyles styles)\nat OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters(SanctionsResultsModel model, String tagPrefix) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 2508\nat OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.GetCheckStatusFromFunctionApp(List\u00601 CheckIds, Int32 applicantId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 609\n\nAI Reasoning: This is a blocking issue for applicant onboarding and workflow processing, with potential to skip or corrupt important records. Severity and priority are set to High.\n\nPotential Fix: Ensure incoming date strings are validated for format compliance before parsing. Use safer parse methods and improve error handling as detailed in the error log analysis.",
      "reproSteps": "Trigger a background integration or document mapping process with an input containing an invalid or improperly formatted date string. Observe the exception in logs at 2025-08-26T07:00:00.000Z.",
      "severity": "High",
      "priority": "High",
      "areaPath": "OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters",
      "assignedTo": "",
      "tags": [
        "AI-AutoGenerated",
        "FixMate",
        "ErrorLog"
      ]
    }
  }
]