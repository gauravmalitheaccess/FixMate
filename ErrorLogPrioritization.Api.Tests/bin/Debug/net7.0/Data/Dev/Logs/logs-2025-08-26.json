[
  {
    "id": "048d31d6-cafe-4a02-b344-86f6fb54f679",
    "timestamp": "2025-08-26T14:59:00.737Z",
    "source": "UserController.Login",
    "message": "User authentication failed - invalid credentials",
    "stackTrace": "at UserController.Login(LoginRequest request) in UserController.cs:line 45\nat AuthService.ValidateCredentials() in AuthService.cs:line 23",
    "severity": "High",
    "priority": "High",
    "aiReasoning": "",
    "potentialFix": "",
    "analyzedAt": "2025-08-26T15:59:00.737Z",
    "isAnalyzed": true
  },
  {
    "id": "b2d28421-fbc7-47b1-9190-f7ae45975c5b",
    "timestamp": "2025-08-26T12:59:00.737Z",
    "source": "PaymentService.ProcessPayment",
    "message": "Payment processing timeout - gateway unreachable",
    "stackTrace": "at PaymentService.ProcessPayment() in PaymentService.cs:line 67\nat PaymentGateway.Charge() in PaymentGateway.cs:line 12",
    "severity": "Critical",
    "priority": "High",
    "aiReasoning": "",
    "potentialFix": "",
    "analyzedAt": "2025-08-26T13:59:00.737Z",
    "isAnalyzed": true
  },
  {
    "id": "fb35e862-51c8-46d2-8591-a0d6270d0f9d",
    "timestamp": "2025-08-26T10:59:00.737Z",
    "source": "DatabaseConnection.Connect",
    "message": "Database connection pool exhausted",
    "stackTrace": "at DatabaseContext.GetConnection() in DatabaseContext.cs:line 89\nat ConnectionPool.AcquireConnection() in ConnectionPool.cs:line 34",
    "severity": "High",
    "priority": "Medium",
    "aiReasoning": "",
    "potentialFix": "",
    "analyzedAt": "2025-08-26T11:59:00.737Z",
    "isAnalyzed": true
  },
  {
    "id": "f3aaa60b-32a4-42ec-a91a-5e6345e86b13",
    "timestamp": "2025-08-26T08:59:00.737Z",
    "source": "EmailService.SendEmail",
    "message": "SMTP server connection failed",
    "stackTrace": "at EmailService.SendEmail() in EmailService.cs:line 56\nat SmtpClient.Send() in SmtpClient.cs:line 78",
    "severity": "Medium",
    "priority": "Medium",
    "aiReasoning": "",
    "potentialFix": "",
    "analyzedAt": null,
    "isAnalyzed": false
  },
  {
    "id": "9552da60-7348-49b4-b33a-b6fed3ebc4da",
    "timestamp": "2025-08-26T06:59:00.737Z",
    "source": "FileUploadController.Upload",
    "message": "File upload size exceeds maximum limit",
    "stackTrace": "at FileUploadController.Upload() in FileUploadController.cs:line 123\nat FileValidator.ValidateSize() in FileValidator.cs:line 45",
    "severity": "Low",
    "priority": "Low",
    "aiReasoning": "",
    "potentialFix": "",
    "analyzedAt": "2025-08-26T07:59:00.737Z",
    "isAnalyzed": true
  },
  {
    "id": "718318a4-7647-4428-8812-fe19b4930c4f",
    "timestamp": "2025-08-26T18:10:56.2098718Z",
    "source": "OrderController.ProcessPayment",
    "message": "The process cannot access the file because it is being used by another process",
    "stackTrace": "   at Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler.HandleAuthenticateAsync()\n   at Microsoft.AspNetCore.Authentication.AuthenticationHandler\u00601.AuthenticateAsync()\n   at Microsoft.AspNetCore.Authentication.AuthenticationService.AuthenticateAsync()",
    "severity": "Low",
    "priority": "",
    "aiReasoning": "",
    "potentialFix": "",
    "analyzedAt": null,
    "isAnalyzed": false
  },
  {
    "id": "e5828aeb-7bd8-4b4b-a1c8-68413c417f62",
    "timestamp": "2025-08-26T22:31:09.0447891Z",
    "source": "NotificationService.SendPush",
    "message": "A network-related or instance-specific error occurred",
    "stackTrace": "   at System.Data.Entity.Internal.LazyInternalContext.InitializeContext()\n   at System.Data.Entity.Internal.InternalContext.GetEntitySetAndBaseTypeForType(Type entityType)\n   at System.Data.Entity.Internal.Linq.InternalSet\u00601.Initialize()",
    "severity": "Critical",
    "priority": "",
    "aiReasoning": "",
    "potentialFix": "",
    "analyzedAt": null,
    "isAnalyzed": false
  },
  {
    "id": "1aa0cbee-2536-4e1e-8cd1-86be994a28f7",
    "timestamp": "2025-08-26T22:59:31.4779685Z",
    "source": "OrderService.CalculateTotal",
    "message": "Arithmetic operation resulted in an overflow",
    "stackTrace": "   at Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler.HandleAuthenticateAsync()\n   at Microsoft.AspNetCore.Authentication.AuthenticationHandler\u00601.AuthenticateAsync()\n   at Microsoft.AspNetCore.Authentication.AuthenticationService.AuthenticateAsync()",
    "severity": "High",
    "priority": "",
    "aiReasoning": "",
    "potentialFix": "",
    "analyzedAt": null,
    "isAnalyzed": false
  },
  {
    "id": "94a74d47-7412-44cf-a46b-8b6361dd667f",
    "timestamp": "2025-08-26T22:01:52.0218571Z",
    "source": "ApiGateway.RouteRequest",
    "message": "Unable to connect to the remote server",
    "stackTrace": "   at Microsoft.AspNetCore.Authentication.JwtBearer.JwtBearerHandler.HandleAuthenticateAsync()\n   at Microsoft.AspNetCore.Authentication.AuthenticationHandler\u00601.AuthenticateAsync()\n   at Microsoft.AspNetCore.Authentication.AuthenticationService.AuthenticateAsync()",
    "severity": "Medium",
    "priority": "",
    "aiReasoning": "",
    "potentialFix": "",
    "analyzedAt": null,
    "isAnalyzed": false
  },
  {
    "id": "5e8c50cf-bc4f-45c9-9520-6685b7e73b79",
    "timestamp": "2025-08-26T21:08:34.0298457Z",
    "source": "EmailService.SendNotification",
    "message": "Index was outside the bounds of the array",
    "stackTrace": "   at System.Collections.Generic.Dictionary\u00602.get_Item(TKey key)\n   at MyApp.Services.UserService.GetUser(Int32 userId) in C:\\Source\\MyApp\\Services\\UserService.cs:line 45\n   at MyApp.Controllers.UserController.GetUserProfile(Int32 id)",
    "severity": "High",
    "priority": "",
    "aiReasoning": "",
    "potentialFix": "",
    "analyzedAt": null,
    "isAnalyzed": false
  },
  {
    "id": "4179a302-4c12-4baa-9c68-febf79f5b912",
    "timestamp": "2025-08-26T23:56:22.9668789Z",
    "source": "DatabaseService.ExecuteQuery",
    "message": "The given key was not present in the dictionary",
    "stackTrace": "   at System.Collections.Generic.Dictionary\u00602.get_Item(TKey key)\n   at MyApp.Services.UserService.GetUser(Int32 userId) in C:\\Source\\MyApp\\Services\\UserService.cs:line 45\n   at MyApp.Controllers.UserController.GetUserProfile(Int32 id)",
    "severity": "Critical",
    "priority": "",
    "aiReasoning": "",
    "potentialFix": "",
    "analyzedAt": null,
    "isAnalyzed": false
  },
  {
    "id": "b8a66095-993b-412e-9765-cebeg850a174",
    "timestamp": "2025-08-26T06:59:00.737Z",
    "source": "OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters",
    "message": "String was not recognized as a valid DateTime.",
    "stackTrace": "at System.DateTimeParse.Parse(String s, DateTimeFormatInfo dtfi, DateTimeStyles styles)\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters(SanctionsResultsModel model, String tagPrefix) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 2508\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.GetCheckStatusFromFunctionApp(List\u00601 CheckIds, Int32 applicantId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 609",
    "severity": "Medium",
    "priority": "Medium",
    "aiReasoning": "The error occurs when the application attempts to parse a string into a DateTime object using System.DateTimeParse.Parse, but the string does not conform to expected DateTime formats. This disrupts processing within a background integration routine that could impact automated workflows, but does not affect overall system stability or lead to data loss, so severity and priority are Medium.",
    "potentialFix": "Root Cause: The DateTime.Parse method is receiving a string input that is not in a valid DateTime format, which causes the exception. This typically happens when input data is malformed, empty, or in an unexpected format.\nHow to Fix: 1. Confirm the data source or transformation generating the DateTime value. 2. Use DateTime.TryParse or DateTime.TryParseExact to safely handle invalid or variable formats without throwing exceptions. 3. Validate and log problematic values for further analysis. Example fix in C#:\nDateTime parsedDate;\nif (!DateTime.TryParse(inputString, out parsedDate)) {\n   // handle invalid format, log or set to default\n}\nUser Guidance: Ensure that input date values are correctly formatted (e.g., \u0022yyyy-MM-dd\u0022 or \u0022MM/dd/yyyy\u0022) and not empty. Consider updating documentation or data entry forms.\nReferences: https://learn.microsoft.com/en-us/dotnet/standard/base-types/parsing-datetime",
    "analyzedAt": "2025-08-26T07:59:00.737Z",
    "isAnalyzed": true
  },
  {
    "id": "2e5e502b-4f7f-4f2a-88dc-4dfa9a435405",
    "timestamp": "2025-08-26T06:59:00.737Z",
    "source": "OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters",
    "message": "String was not recognized as a valid DateTime.",
    "stackTrace": "at System.DateTimeParse.Parse(String s, DateTimeFormatInfo dtfi, DateTimeStyles styles)\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters(SanctionsResultsModel model, String tagPrefix) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 2508\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.GetCheckStatusFromFunctionApp(List\u00601 CheckIds, Int32 applicantId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 609",
    "severity": "Medium",
    "priority": "Medium",
    "aiReasoning": "This error is triggered by a failure to parse a string into a DateTime object within a key integration mapping function. Although this does not cause a system-wide crash, it indicates a recurrent data or format issue that may affect functionality for multiple applicants and result sets. Addressing it is important to prevent ongoing or broader disruption.",
    "potentialFix": "Root Cause: The application attempted to convert a string to DateTime, but the string was not in a valid or expected format. This commonly occurs if date strings are not standardized or if there is a mismatch between expected and actual formats (e.g., \u0027MM/dd/yyyy\u0027 vs. \u0027yyyy-MM-dd\u0027). Solution: 1) Identify where the date string is sourced in SanctionsResultsModel or upstream data. 2) Ensure all date strings are in a format compatible with DateTime.Parse; consider using DateTime.TryParse or DateTime.ParseExact with explicit format and culture settings for safer parsing. Example: DateTime.TryParseExact(dateString, \u0022yyyy-MM-dd\u0022, CultureInfo.InvariantCulture, DateTimeStyles.None, out parsedDate). 3) Add null checks and logging for values that fail parsing. 4) Update any data providers to use consistent date formats. Reference: https://learn.microsoft.com/en-us/dotnet/standard/base-types/parsing-datetime",
    "analyzedAt": "2025-08-26T07:59:00.737Z",
    "isAnalyzed": true
  },
  {
    "id": "315f2cd8-ad62-4ae2-b157-6c990719abbf",
    "timestamp": "2025-08-26T06:59:00.737Z",
    "source": "OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters",
    "message": "String was not recognized as a valid DateTime.",
    "stackTrace": "at System.DateTimeParse.Parse(String s, DateTimeFormatInfo dtfi, DateTimeStyles styles)\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters(SanctionsResultsModel model, String tagPrefix) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 2508\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.GetCheckStatusFromFunctionApp(List\u00601 CheckIds, Int32 applicantId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 609",
    "severity": "Medium",
    "priority": "Medium",
    "aiReasoning": "This error results from parsing a string that is not in an accepted DateTime format, preventing further data processing. It impacts correct business logic execution and may cause incomplete transactions or reporting errors but does not crash the overall application.",
    "potentialFix": "Root Cause: The input string could not be parsed as a valid DateTime due to either an invalid value or incompatible format. Solution: Check the data source providing the input string to ensure all dates are in a valid, expected format (e.g., ISO 8601: \u0027yyyy-MM-ddTHH:mm:ss\u0027). Add validation before calling DateTime.Parse, using DateTime.TryParse or DateTime.TryParseExact to handle possible format mismatches and provide fallback/default values if parsing fails.\nExample fix:\nDateTime result;\nif(!DateTime.TryParse(dateString, out result)) { /* handle error or set default */ }\nUser Guidance: If manually supplying dates, make sure they conform to the expected format used by the application. Encode dates in a culture-invariant format such as ISO 8601.\nReference: https://learn.microsoft.com/en-us/dotnet/standard/base-types/parsing-datetime",
    "analyzedAt": "2025-08-26T07:59:00.737Z",
    "isAnalyzed": true
  },
  {
    "id": "0febf73d-9c6e-4356-b8dc-36aa0c5feb53",
    "timestamp": "2025-08-26T06:59:00.737Z",
    "source": "OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters",
    "message": "String was not recognized as a valid DateTime.",
    "stackTrace": "at System.DateTimeParse.Parse(String s, DateTimeFormatInfo dtfi, DateTimeStyles styles)\n   at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters(SanctionsResultsModel model, String tagPrefix) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 2508\n   at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.GetCheckStatusFromFunctionApp(List\u00601 CheckIds, Int32 applicantId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 609",
    "severity": "Medium",
    "priority": "Medium",
    "aiReasoning": "This error is caused by an invalid date/time string being parsed in the MapToDocumentParameters method. It may block or corrupt the integration process for one or more applicants but does not crash the entire application or cause data loss. Assigning Medium to both severity and priority as it could interrupt a workflow but isn\u0027t system-critical.",
    "potentialFix": "Root Cause: The error occurs when the code attempts to parse a string that is not in a recognized DateTime format. This can be caused by unexpected input data or inconsistent date formats coming from upstream data sources or user input. Step-by-step resolution: 1. Identify the input string causing the failure by adding detailed logging around DateTime parsing operations in MapToDocumentParameters. 2. Validate or sanitize all incoming date strings before parsing. For example, use DateTime.TryParse or DateTime.TryParseExact to prevent exceptions and handle errors gracefully. 3. Update the data provider, API, or UI to ensure date formats are consistent\u2014prefer using ISO 8601 (yyyy-MM-ddTHH:mm:ss) or similar invariant formats. 4. Consider adding error handling to log and skip bad records, or notify users of validation failures. User Guidance: Ensure any manual date input uses the required format, or contact support with the input value that caused the issue. Reference: https://learn.microsoft.com/en-us/dotnet/standard/base-types/parsing-date-and-time-strings",
    "analyzedAt": "2025-08-26T07:59:00.737Z",
    "isAnalyzed": true
  }
]