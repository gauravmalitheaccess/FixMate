[
  {
    "id": "8b0dfdfb-0124-4e5b-b574-87acfd308292",
    "timestamp": "2025-08-28T05:11:49.8208803Z",
    "source": "DateTimeParse.Parse",
    "message": "at System.DateTimeParse.Parse(String s, DateTimeFormatInfo dtfi, DateTimeStyles styles)     at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters(SanctionsResultsModel model, String tagPrefix) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 2508     at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.GetCheckStatusFromFunctionApp(List\u00601 CheckIds, Int32 applicantId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 609",
    "stackTrace": "String was not recognized as a valid DateTime.:   at System.DateTimeParse.Parse(String s, DateTimeFormatInfo dtfi, DateTimeStyles styles)     at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters(SanctionsResultsModel model, String tagPrefix) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 2508     at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.GetCheckStatusFromFunctionApp(List\u00601 CheckIds, Int32 applicantId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 609",
    "severity": "Medium",
    "priority": "Low",
    "aiReasoning": "Assigned Medium severity based on error pattern analysis",
    "potentialFix": "{\n  \u0022id\u0022: \u002283a23332-648a-4e83-b662-ccaf7ee56a76\u0022,\n  \u0022timestamp\u0022: \u00222025-08-26T06:59:00.737Z\u0022,\n  \u0022source\u0022: \u0022OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters\u0022,\n  \u0022mes...",
    "analyzedAt": "2025-08-28T05:12:27.9960632Z",
    "isAnalyzed": true,
    "resolutionStatus": "Pending",
    "resolvedAt": null,
    "resolvedBy": null,
    "adoBug": null
  },
  {
    "id": "f004a5a9-3884-4ac9-a997-7a95a1ca58ed",
    "timestamp": "2025-08-28T05:22:10.2745466Z",
    "source": "OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters",
    "message": "String was not recognized as a valid DateTime.",
    "stackTrace": "at System.DateTimeParse.Parse(String s, DateTimeFormatInfo dtfi, DateTimeStyles styles)\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters(SanctionsResultsModel model, String tagPrefix) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 2508\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.GetCheckStatusFromFunctionApp(List\u00601 CheckIds, Int32 applicantId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 609",
    "severity": "Medium",
    "priority": "Medium",
    "aiReasoning": "This error prevents the application from correctly parsing or processing date values, likely causing incorrect data display or failed business logic execution. It\u0027s not system-wide, but could disrupt key workflows or integrations, so severity and priority are Medium.",
    "potentialFix": "Root Cause: The input string being converted to DateTime is in an incorrect or unexpected format for DateTime.Parse. Solution: Ensure all date strings passed to MapToDocumentParameters are in a valid, ISO 8601 or expected culture-specific format. Update code to use DateTime.TryParse or DateTime.TryParseExact for safer parsing and better error handling. Example: DateTime.TryParseExact(dateString, \u0022yyyy-MM-dd\u0022, CultureInfo.InvariantCulture, DateTimeStyles.None, out var parsedDate). User Guidance: Confirm any manual date entries and integrations provide dates as YYYY-MM-DD. Reference: https://learn.microsoft.com/en-us/dotnet/standard/base-types/parsing-datetime",
    "analyzedAt": "2025-08-28T05:22:10.2745411Z",
    "isAnalyzed": true,
    "resolutionStatus": "Pending",
    "resolvedAt": null,
    "resolvedBy": null,
    "adoBug": null
  },
  {
    "id": "9ab5c857-2046-4d09-936c-046e6d7e88c3",
    "timestamp": "2025-08-28T05:23:54.9691779Z",
    "source": "OnBoardLarge.Pdfmergetag.PDFMergeTags.GetCheckTags",
    "message": "Value cannot be null. (Parameter \u0027collection\u0027)",
    "stackTrace": "at System.ThrowHelper.ThrowArgumentNullException(ExceptionArgument argument)\n at System.Collections.Generic.List\u00601.InsertRange(Int32 index, IEnumerable\u00601 collection)\n at OnBoardLarge.Pdfmergetag.PDFMergeTags.GetCheckTags(Int32 applicantId, List\u00601 checkIds, ServerSideDeclarationReplacerList replacerTags) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.Pdfreplacetag\\PDFMergeTags.cs:line 619\n at OnBoardLarge.Pdfmergetag.PDFMergeTags.GetUBCReportTags(Int32 applicantId, Int32 checkId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.Pdfreplacetag\\PDFMergeTags.cs:line 405\n at Onboarded.Functions.MergeTagReplacer.MergeTagReplacer.\u003CRun\u003Ed__2.MoveNext() in D:\\a\\1\\s\\Onboarded.Functions\\MergeTagReplacer\\MergeTagReplacer.cs:line 148",
    "severity": "High",
    "priority": "Medium",
    "aiReasoning": "The error was caused by a null collection being passed to List\u003CT\u003E.InsertRange, which likely results in failure of a key document processing operation for an applicant. The impact can block report generation or merging, making it a High severity issue. As it can be tied to specific data or paths and may not always crash the system, priority is set to Medium unless this pattern recurs frequently.",
    "potentialFix": "Root Cause: The collection parameter passed to List\u003CT\u003E.InsertRange is null, which is not permitted. This commonly happens if an upstream method returns or receives a null list instead of an empty collection.\nSolution: Audit the code paths leading to PDFMergeTags.GetCheckTags and ensure the checkIds and any other collection passed to InsertRange are checked for null and instantiated to an empty list if not provided. For example:\nif (collection == null) collection = new List\u003CT\u003E();\nAlternatively, use ?? new List\u003CT\u003E() when passing the parameter.\nUser Guidance: If this error follows a specific user or input workflow, users should make sure all required selections/inputs are made before submitting.\nReference: https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.insertrange",
    "analyzedAt": "2025-08-28T05:23:54.9691773Z",
    "isAnalyzed": true,
    "resolutionStatus": "Pending",
    "resolvedAt": null,
    "resolvedBy": null,
    "adoBug": null
  },
  {
    "id": "d5ee4b04-1b28-4685-92b0-c9801be5a5b2",
    "timestamp": "2025-08-28T05:25:31.2645595Z",
    "source": "Onboarded.Functions.Utility.MergeTagReplacerUtility.MergePdfsAndBlobUpload",
    "message": "One or more errors occurred.",
    "stackTrace": "at System.Threading.Tasks.Task\u00601.GetResultCore(Boolean waitCompletionNotification)\n at Onboarded.Functions.Utility.MergeTagReplacerUtility.MergePdfsAndBlobUpload(List\u00601 urls, Int32 applicantId, String mergedFileName, String connectionString, Int32 clientId, vClient vclient, String azureStorageAccount, String azureBlobContainerName) in D:\\Onboarded New\\Onboarded.Functions\\Utility\\MergeTagReplacerUtility.cs:line 1805\n at Onboarded.Functions.MergeTagReplacer.MergeTagReplacer.\u003CRun\u003Ed__2.MoveNext() in D:\\Onboarded New\\Onboarded.Functions\\MergeTagReplacer\\MergeTagReplacer.cs:line 409\nInner Exception: System.ArgumentException: String cannot be of zero length. Parameter name: oldValue at System.String.ReplaceInternal(String oldValue, String newValue) at System.String.Replace(String oldValue, String newValue) at OnBoardLarge.UploadDocumentToBlob.AzureBlobService.\u003CUploadCandidateProfileToBlob\u003Ed__9.MoveNext() in D:\\Onboarded New\\OnBoardLarge.Base\\OnBoardLarge.UploadDocumentToBlob\\AzureBlobService.cs:line 307",
    "severity": "High",
    "priority": "High",
    "aiReasoning": "The error is an unhandled System.AggregateException, containing a System.ArgumentException caused by a call to String.Replace with an invalid parameter (oldValue is an empty string). This likely prevents PDF merging and blob upload functionality, which is a major process. The error could block core application workflows for users and must be addressed immediately.",
    "potentialFix": "Root Cause: The exception was triggered by a call to String.Replace() where the first argument (oldValue) was an empty string. According to .NET documentation, oldValue cannot be empty, and passing an empty string will always result in System.ArgumentException. This occurred during document upload and PDF merging, potentially interrupting the overall file-handling pipeline. Solution: Review the code at OnBoardLarge.UploadDocumentToBlob.AzureBlobService.\u003CUploadCandidateProfileToBlob\u003Ed__9, especially line 307, and ensure that oldValue is checked for null or empty before calling Replace. Example fix: if (!string.IsNullOrEmpty(oldValue)) { str.Replace(oldValue, newValue); }. Also, investigate why oldValue is empty\u2014review upstream variables and refactor logic to prevent empty values here. User Guidance: No user action is needed; this requires a code fix by the development team. References: https://learn.microsoft.com/en-us/dotnet/api/system.string.replace and internal KB on aggregate exception handling.",
    "analyzedAt": "2025-08-28T05:25:31.2645587Z",
    "isAnalyzed": true,
    "resolutionStatus": "Pending",
    "resolvedAt": null,
    "resolvedBy": null,
    "adoBug": null
  },
  {
    "id": "7b259670-3572-491e-9e15-aca4b9b9779e",
    "timestamp": "2025-08-28T05:28:47.6119437Z",
    "source": "ApplicantReminderEmailDomain.sendReminderEmail",
    "message": "Task\u00601.GetResultCore(Boolean) exception occurred during sendReminderEmail",
    "stackTrace": "at System.Threading.Tasks.Task\u00601.GetResultCore(Boolean waitCompletionNotification)\n at OnBoardLarge.Domain.ApplicantModule.ApplicantReminderEmailDomain.sendReminderEmail(Int32 ClientId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.Domain\\ApplicantModule\\ApplicantReminderEmailDomain.cs:line 67",
    "severity": "Medium",
    "priority": "Medium",
    "aiReasoning": "This error occurs during an asynchronous operation in email sending, likely due to an unhandled exception when calling Task.Result or Task.Wait. This can block the processing of applicant reminder emails but does not crash the system or result in data loss. Severity is Medium as it may delay business communications, and priority is Medium since addressing it improves reliability.",
    "potentialFix": "Root Cause: The error is commonly due to an unhandled exception in an awaited asynchronous email-sending operation, typically caused by using .Result or .Wait on a Task that faults or by lacking proper exception handling around async code. Solution: 1) Refactor the sendReminderEmail method to use \u0027async/await\u0027 properly and wrap Task-related calls in try/catch blocks to handle exceptions explicitly. 2) If using Task.Result, replace with \u0027await\u0027 where possible to avoid AggregateException. 3) Log the inner exception for easier debugging. Example: \u0027try { await emailService.SendAsync(); } catch(Exception ex) { logger.LogError(ex, \u0022Failed to send reminder email\u0022); }\u0027. User Guidance: No user action needed unless you are a system administrator; ensure email configuration is correct. Reference: https://learn.microsoft.com/en-us/dotnet/standard/asynchronous-programming-patterns/task-based-asynchronous-pattern-tap",
    "analyzedAt": "2025-08-28T05:28:47.6119429Z",
    "isAnalyzed": true,
    "resolutionStatus": "Pending",
    "resolvedAt": null,
    "resolvedBy": null,
    "adoBug": null
  },
  {
    "id": "dd1a6b10-8c77-41aa-a2eb-1d047cbf9056",
    "timestamp": "2025-08-28T05:56:26.8700765Z",
    "source": "OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters",
    "message": "String was not recognized as a valid DateTime.",
    "stackTrace": "at System.DateTimeParse.Parse(String s, DateTimeFormatInfo dtfi, DateTimeStyles styles)\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters(SanctionsResultsModel model, String tagPrefix) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 2508\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.GetCheckStatusFromFunctionApp(List\u00601 CheckIds, Int32 applicantId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 609",
    "severity": "Medium",
    "priority": "Medium",
    "aiReasoning": "This error is caused by a string value failing to convert to a valid DateTime format. Parsing errors can disrupt workflow or integrations but do not crash the system or result in data loss, hence severity is Medium. The priority is also Medium as it needs to be addressed to ensure the integration works correctly but is not an immediate system-wide outage.",
    "potentialFix": "Root Cause: The input string provided to DateTime.Parse or a related method is not accurately formatted according to the expected DateTime pattern. This can occur if data contains unexpected or locale-specific date representations.\nHow to Fix: Review input data passed to the parsing method. Add input validation (e.g., DateTime.TryParse with a specified format) before attempting conversion. If the application processes multiple date formats, use DateTime.TryParseExact for stricter validation or log the offending input for investigation. Example:\nif (!DateTime.TryParse(inputString, out var result)) { /* handle error or log */ }\nUser Guidance: Confirm date/time inputs comply with the expected application format (such as yyyy-MM-dd or MM/dd/yyyy).\nReference: https://learn.microsoft.com/en-us/dotnet/api/system.datetime.tryparse and https://learn.microsoft.com/en-us/dotnet/standard/base-types/parsing-datetime",
    "analyzedAt": "2025-08-28T05:56:26.8700759Z",
    "isAnalyzed": true,
    "resolutionStatus": "Resolved",
    "resolvedAt": "2025-08-28T08:56:33.068Z",
    "resolvedBy": "Current User",
    "adoBug": null
  },
  {
    "id": "d4065c0c-ebe1-43c1-92d6-276e1eeb9b0c",
    "timestamp": "2025-08-28T05:59:31.4753482Z",
    "source": "OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters",
    "message": "String was not recognized as a valid DateTime.",
    "stackTrace": "at System.DateTimeParse.Parse(String s, DateTimeFormatInfo dtfi, DateTimeStyles styles)\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters(SanctionsResultsModel model, String tagPrefix) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 2508\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.GetCheckStatusFromFunctionApp(List\u00601 CheckIds, Int32 applicantId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 609",
    "severity": "Medium",
    "priority": "Medium",
    "aiReasoning": "The error occurred due to a failure in parsing a string to a DateTime object, which likely disrupts a feature that relies on correct date handling. This does not crash the entire system but could block essential data integration workflows, so severity is Medium and priority is Medium.",
    "potentialFix": "Root Cause: The error is triggered when the input string does not match any accepted DateTime formats. This is often caused by inconsistent or unexpected date string representations in incoming data.\nSolution: Add input validation and consistent formatting for all date strings before attempting to parse. Use DateTime.TryParse or DateTime.TryParseExact to safely convert strings, handle failures gracefully, and log problematic values.\nExample fix: \nDateTime dt;\nif (!DateTime.TryParse(inputString, out dt)) { /* handle invalid date, log error, set default, or prompt user */ }\nUser Guidance: Ensure that date fields are correctly filled and in supported formats where user input is possible.\nReference: https://learn.microsoft.com/en-us/dotnet/standard/base-types/parsing-datetime",
    "analyzedAt": "2025-08-28T05:59:31.4753476Z",
    "isAnalyzed": true,
    "resolutionStatus": "Pending",
    "resolvedAt": null,
    "resolvedBy": null,
    "adoBug": null
  },
  {
    "id": "be7a3fa2-7b77-42b1-9572-8c4d32595b1b",
    "timestamp": "2025-08-28T06:27:42.5397538Z",
    "source": "OnBoardLarge.Pdfmergetag.PDFMergeTags.GetCheckTags",
    "message": "Value cannot be null. (Parameter \u0027collection\u0027)",
    "stackTrace": "at System.ThrowHelper.ThrowArgumentNullException(ExceptionArgument argument)\nat System.Collections.Generic.List\u00601.InsertRange(Int32 index, IEnumerable\u00601 collection)\nat OnBoardLarge.Pdfmergetag.PDFMergeTags.GetCheckTags(Int32 applicantId, List\u00601 checkIds, ServerSideDeclarationReplacerList replacerTags) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.Pdfreplacetag\\PDFMergeTags.cs:line 619\nat OnBoardLarge.Pdfmergetag.PDFMergeTags.GetUBCReportTags(Int32 applicantId, Int32 checkId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.Pdfreplacetag\\PDFMergeTags.cs:line 405\nat Onboarded.Functions.MergeTagReplacer.MergeTagReplacer.\u003CRun\u003Ed__2.MoveNext() in D:\\a\\1\\s\\Onboarded.Functions\\MergeTagReplacer\\MergeTagReplacer.cs:line 148",
    "severity": "High",
    "priority": "High",
    "aiReasoning": "A null argument was passed to a method that expects a non-null collection. This resulted in an unhandled exception in core PDF tag processing logic, potentially affecting broader document generation operations and causing major feature failure. Immediate fix is required to restore functionality.",
    "potentialFix": "Root Cause: The error occurred because a null collection was passed to List\u003CT\u003E.InsertRange, which expects a non-null IEnumerable\u003CT\u003E object. This typically happens if an upstream method fails to initialize or supply the required collection. Solution: Audit the code path leading to PDFMergeTags.GetCheckTags and ensure that all collection parameters, especially the \u0027checkIds\u0027 or any collection passed to InsertRange, are initialized and non-null before use. Example fix in C#: if (collection == null) { throw new ArgumentNullException(nameof(collection)); } or collection = collection ?? new List\u003CT\u003E();. Add defensive null checks prior to calling InsertRange. User Guidance: No user action is required; developers should update the codebase to enforce non-null collection parameters. References: https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.insertrange",
    "analyzedAt": "2025-08-28T06:27:42.5397534Z",
    "isAnalyzed": true,
    "resolutionStatus": "Pending",
    "resolvedAt": null,
    "resolvedBy": null,
    "adoBug": null
  },
  {
    "id": "adf8ec25-564d-4e8d-b8be-cad7c1607dd8",
    "timestamp": "2025-08-28T08:48:21.5135122Z",
    "source": "OnBoardLarge.Pdfmergetag.PDFMergeTags.GetCheckTags",
    "message": "Value cannot be null. Parameter name: collection",
    "stackTrace": "at System.ThrowHelper.ThrowArgumentNullException(ExceptionArgument argument)\nat System.Collections.Generic.List\u00601.InsertRange(Int32 index, IEnumerable\u00601 collection)\nat OnBoardLarge.Pdfmergetag.PDFMergeTags.GetCheckTags(Int32 applicantId, List\u00601 checkIds, ServerSideDeclarationReplacerList replacerTags) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.Pdfreplacetag\\PDFMergeTags.cs:line 619\nat OnBoardLarge.Pdfmergetag.PDFMergeTags.GetUBCReportTags(Int32 applicantId, Int32 checkId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.Pdfreplacetag\\PDFMergeTags.cs:line 405\nat Onboarded.Functions.MergeTagReplacer.MergeTagReplacer.\u003CRun\u003Ed__2.MoveNext() in D:\\a\\1\\s\\Onboarded.Functions\\MergeTagReplacer\\MergeTagReplacer.cs:line 148",
    "severity": "High",
    "priority": "High",
    "aiReasoning": "A null parameter was passed into a method where a collection is required, which caused an unhandled exception that could interrupt a major processing workflow (tag merging). This can break feature functionality and affect business-critical output, so severity and priority are both High.",
    "potentialFix": "Root Cause: The error is caused by a null collection being passed to List\u003CT\u003E.InsertRange, which is not allowed and will throw an ArgumentNullException. Solution: Before calling InsertRange or similar list operations, validate that the collection parameter is not null. For example:\nif (collection != null) { list.InsertRange(index, collection); } else { /* handle or log appropriately */ }\nAlternatively, add null checks at the start of the method:\nif (collection == null) throw new ArgumentNullException(nameof(collection));\nUser Guidance: Ensure that any upstream logic constructing or passing the collection guarantees it is never null, or provide a default like an empty list.\nReference: https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.insertrange",
    "analyzedAt": "2025-08-28T08:48:21.5135111Z",
    "isAnalyzed": true,
    "resolutionStatus": "Resolved",
    "resolvedAt": "2025-08-28T08:50:24.304Z",
    "resolvedBy": "Current User",
    "adoBug": null
  },
  {
    "id": "0c2ad473-7b21-4390-88eb-355e069b273c",
    "timestamp": "2025-08-28T08:56:04.4011432Z",
    "source": "OnBoardLarge.Pdfmergetag.PDFMergeTags.GetCheckTags",
    "message": "Value cannot be null. Parameter name: collection",
    "stackTrace": "at System.ThrowHelper.ThrowArgumentNullException(ExceptionArgument argument)\n at System.Collections.Generic.List\u00601.InsertRange(Int32 index, IEnumerable\u00601 collection)\n at OnBoardLarge.Pdfmergetag.PDFMergeTags.GetCheckTags(Int32 applicantId, List\u00601 checkIds, ServerSideDeclarationReplacerList replacerTags) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.Pdfreplacetag\\PDFMergeTags.cs:line 619\n at OnBoardLarge.Pdfmergetag.PDFMergeTags.GetUBCReportTags(Int32 applicantId, Int32 checkId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.Pdfreplacetag\\PDFMergeTags.cs:line 405\n at Onboarded.Functions.MergeTagReplacer.MergeTagReplacer.\u003CRun\u003Ed__2.MoveNext() in D:\\a\\1\\s\\Onboarded.Functions\\MergeTagReplacer\\MergeTagReplacer.cs:line 148",
    "severity": "High",
    "priority": "High",
    "aiReasoning": "This error is due to a null collection being passed to InsertRange. As this occurs in a core backend data process, it likely interrupts an essential feature affecting downstream processing. The stack trace indicates the error could block functionality for multiple users, justifying both High severity and High priority.",
    "potentialFix": "Root Cause: A null reference was passed to List\u003CT\u003E.InsertRange, which requires a non-null IEnumerable\u003CT\u003E collection. This often happens when a method expects a list to be initialized or when data-fetching logic returns null instead of an empty collection. Solution: Identify all calls to GetCheckTags and ensure that the \u0027checkIds\u0027 parameter and any target collections are initialized to empty lists if they may be null. Example in C#: checkIds = checkIds ?? new List\u003Cint\u003E(); User Guidance: No user action required, this is a technical backend issue. Reference: https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.insertrange",
    "analyzedAt": "2025-08-28T08:56:04.4011429Z",
    "isAnalyzed": true,
    "resolutionStatus": "Pending",
    "resolvedAt": null,
    "resolvedBy": null,
    "adoBug": null
  },
  {
    "id": "d88bfa3b-b597-448f-9131-4ddbcfdb8f2b",
    "timestamp": "2025-08-28T09:21:52.8895022Z",
    "source": "OnBoardLarge.Pdfmergetag.PDFMergeTags.GetCheckTags",
    "message": "System.ThrowHelper.ThrowArgumentNullException: Value cannot be null. Parameter name: collection",
    "stackTrace": "at System.ThrowHelper.ThrowArgumentNullException(ExceptionArgument argument)\n    at System.Collections.Generic.List\u00601.InsertRange(Int32 index, IEnumerable\u00601 collection)\n    at OnBoardLarge.Pdfmergetag.PDFMergeTags.GetCheckTags(Int32 applicantId, List\u00601 checkIds, ServerSideDeclarationReplacerList replacerTags) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.Pdfreplacetag\\PDFMergeTags.cs:line 619\n    at OnBoardLarge.Pdfmergetag.PDFMergeTags.GetUBCReportTags(Int32 applicantId, Int32 checkId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.Pdfreplacetag\\PDFMergeTags.cs:line 405\n    at Onboarded.Functions.MergeTagReplacer.MergeTagReplacer.\u003CRun\u003Ed__2.MoveNext() in D:\\a\\1\\s\\Onboarded.Functions\\MergeTagReplacer\\MergeTagReplacer.cs:line 148",
    "severity": "High",
    "priority": "High",
    "aiReasoning": "This is a high severity and high priority issue because a null collection is being passed to the InsertRange method in a core data processing workflow. This will cause a runtime exception and disrupt document/tag merging functionality, potentially impacting critical application features for many users.",
    "potentialFix": "Root Cause: The List\u003CT\u003E.InsertRange method received a null collection argument, triggering an ArgumentNullException. This typically happens if the source collection or an upstream function provided a null object instead of an initialized list or enumerable.\nHow to Fix: Review the code at PDFMergeTags.cs, line 619, and trace where the collection comes from. Ensure that any variable passed to InsertRange is never null. You can use a null check and initialize to an empty list if needed. Example fix:\nif (collection == null) collection = new List\u003CT\u003E();\n// or throw a controlled exception before InsertRange.\nAdditionally, validate inputs at the call site (e.g., GetCheckTags) and ensure upstream methods (like GetUBCReportTags or their parameters) never pass null values for collections that will be inserted.\nUser Guidance: As this is a backend/processing issue, end users may encounter document/tag merging failures. Inform them the system error is being resolved.\nReference: https://learn.microsoft.com/en-us/dotnet/api/system.collections.generic.list-1.insertrange",
    "analyzedAt": "2025-08-28T09:21:52.8895017Z",
    "isAnalyzed": true,
    "resolutionStatus": "Resolved",
    "resolvedAt": "2025-08-28T09:23:06.282Z",
    "resolvedBy": "Current User",
    "adoBug": null
  },
  {
    "id": "d2e45efa-cc74-449e-b6d7-89d4725726b0",
    "timestamp": "2025-08-28T10:43:51.0189159Z",
    "source": "",
    "message": "",
    "stackTrace": "",
    "severity": "",
    "priority": "",
    "aiReasoning": "",
    "potentialFix": "",
    "analyzedAt": "2025-08-28T10:43:51.0189148Z",
    "isAnalyzed": false,
    "resolutionStatus": "Pending",
    "resolvedAt": null,
    "resolvedBy": null,
    "adoBug": {
      "title": "String was not recognized as a valid DateTime.",
      "description": "Source: OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters\n\nMessage: String was not recognized as a valid DateTime.\n\nStackTrace:\nat System.DateTimeParse.Parse(String s, DateTimeFormatInfo dtfi, DateTimeStyles styles)\n   at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters(SanctionsResultsModel model, String tagPrefix) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 2508\n   at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.GetCheckStatusFromFunctionApp(List\u00601 CheckIds, Int32 applicantId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 609\n\nAI Reasoning: The error prevents correct date parsing, which is essential for background integration processes. If dates are not parsed correctly, compliance and workflow operations may fail, making this a high-severity, high-priority issue.\n\nPotential Fix: Root Cause: The error occurs when parsing a string as DateTime, but the string is not a valid format. 1) Ensure incoming dates are in a known format (preferably ISO 8601). 2) Use DateTime.TryParse or DateTime.TryParseExact for robust parsing and error handling. 3) Add input validation for user or external API data. Reference: https://learn.microsoft.com/en-us/dotnet/api/system.datetime.parseexact",
      "reproSteps": "Encountered automatically from logs at 2025-08-26T07:00:00.000Z.",
      "severity": "High",
      "priority": "High",
      "areaPath": "OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters",
      "assignedTo": "",
      "tags": [
        "AI-AutoGenerated",
        "FixMate",
        "ErrorLog"
      ]
    }
  },
  {
    "id": "b4fa886c-5859-4a25-aa4c-e0c9117227f1",
    "timestamp": "2025-08-28T10:44:44.4729972Z",
    "source": "",
    "message": "",
    "stackTrace": "",
    "severity": "",
    "priority": "",
    "aiReasoning": "",
    "potentialFix": "",
    "analyzedAt": "2025-08-28T10:44:44.4729965Z",
    "isAnalyzed": false,
    "resolutionStatus": "Pending",
    "resolvedAt": null,
    "resolvedBy": null,
    "adoBug": {
      "title": "String was not recognized as a valid DateTime.",
      "description": "Source: OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters\n\nMessage: String was not recognized as a valid DateTime.\n\nStackTrace:\nat System.DateTimeParse.Parse(String s, DateTimeFormatInfo dtfi, DateTimeStyles styles)\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters(SanctionsResultsModel model, String tagPrefix) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 2508\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.GetCheckStatusFromFunctionApp(List\u00601 CheckIds, Int32 applicantId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 609\n\nAI Reasoning: The error is triggered by an invalid date string encountered by a core mapping function. Without proper correction, this may block critical applicant processing. Severity=High, Priority=High.\n\nPotential Fix: Validate date strings before parsing using DateTime.TryParse. Check, cleanse, or correct upstream data. Reference: https://learn.microsoft.com/en-us/dotnet/api/system.datetime.tryparse",
      "reproSteps": "Encountered automatically from logs at 2025-08-26T06:59:00.737Z",
      "severity": "High",
      "priority": "High",
      "areaPath": "OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters",
      "assignedTo": "",
      "tags": [
        "AI-AutoGenerated",
        "FixMate",
        "ErrorLog"
      ]
    }
  },
  {
    "id": "6672f6d7-7edf-4d8b-ae58-b80786f1c8b4",
    "timestamp": "2025-08-28T10:46:11.2425054Z",
    "source": "",
    "message": "",
    "stackTrace": "",
    "severity": "",
    "priority": "",
    "aiReasoning": "",
    "potentialFix": "",
    "analyzedAt": "2025-08-28T10:46:11.2425048Z",
    "isAnalyzed": false,
    "resolutionStatus": "Pending",
    "resolvedAt": null,
    "resolvedBy": null,
    "adoBug": {
      "title": "String was not recognized as a valid DateTime.",
      "description": "Source: OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters\n\nMessage: String was not recognized as a valid DateTime.\n\nStackTrace:\nat System.DateTimeParse.Parse(String s, DateTimeFormatInfo dtfi, DateTimeStyles styles)\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters(SanctionsResultsModel model, String tagPrefix) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 2508\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.GetCheckStatusFromFunctionApp(List\u00601 CheckIds, Int32 applicantId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 609\n\nAI Reasoning: This error occurs due to an incorrectly formatted date string being processed by DateTime.Parse. Parsing failures here can block integrations or workflows. Severity=High, Priority=High.\n\nPotential Fix: Root Cause: Code attempted to parse a string to DateTime with invalid formatting. Solution: Use DateTime.TryParseExact with explicit format strings. Example: if (!DateTime.TryParseExact(dateValue, \u0022yyyy-MM-dd\u0022, CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime result)) { /* handle error */ }. Reference: https://learn.microsoft.com/en-us/dotnet/standard/base-types/parsing-datetime",
      "reproSteps": "Trigger an integration through UniversalBackgroundIntegration where a date string is passed in an unexpected or invalid format. Observe failure when processing the date parameter.",
      "severity": "High",
      "priority": "High",
      "areaPath": "OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters",
      "assignedTo": "",
      "tags": [
        "AI-AutoGenerated",
        "FixMate",
        "ErrorLog"
      ]
    }
  },
  {
    "id": "b86f3ba2-7ec7-4108-9192-5e337c0565cd",
    "timestamp": "2025-08-28T10:53:49.1398081Z",
    "source": "",
    "message": "",
    "stackTrace": "",
    "severity": "",
    "priority": "",
    "aiReasoning": "",
    "potentialFix": "",
    "analyzedAt": "2025-08-28T10:53:49.139807Z",
    "isAnalyzed": false,
    "resolutionStatus": "Pending",
    "resolvedAt": null,
    "resolvedBy": null,
    "adoBug": {
      "title": "String was not recognized as a valid DateTime.",
      "description": "Source: OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters\n\nMessage: String was not recognized as a valid DateTime.\n\nStackTrace:\nat System.DateTimeParse.Parse(String s, DateTimeFormatInfo dtfi, DateTimeStyles styles)\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters(SanctionsResultsModel model, String tagPrefix) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 2508\n at OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.GetCheckStatusFromFunctionApp(List\u00601 CheckIds, Int32 applicantId) in D:\\a\\1\\s\\OnBoardLarge.Base\\OnBoardLarge.CentralException\\UniversalBackgroundIntegration.cs:line 609\n\nAI Reasoning: The error is triggered when an unparseable or invalid date string is passed for conversion in critical integration logic. Severity=Medium, Priority=Medium.\n\nPotential Fix: Validate all date strings before parsing to DateTime. Use DateTime.TryParse or TryParseExact. Ensure upstream data (SanctionsResultsModel) supplies dates in a consistent, expected format (e.g. ISO 8601). Reference: https://learn.microsoft.com/en-us/dotnet/api/system.datetime.parse",
      "reproSteps": "Trigger a background check process where SanctionsResultsModel contains a non-standard, null, or malformed date string. Observe the failure during MapToDocumentParameters execution.",
      "severity": "Medium",
      "priority": "Medium",
      "areaPath": "OnBoardLarge.CentralUtility.UniversalBackgroundIntegration.MapToDocumentParameters",
      "assignedTo": "",
      "tags": [
        "AI-AutoGenerated",
        "FixMate",
        "ErrorLog"
      ]
    }
  }
]